{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "TriggerOrderProcessingLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/order-processing-service-test-triggerOrderProcessing"
      }
    },
    "CreateOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/order-processing-service-test-createOrder"
      }
    },
    "ProcessPaymentLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/order-processing-service-test-processPayment"
      }
    },
    "ShipOrderLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/order-processing-service-test-shipOrder"
      }
    },
    "SendNotificationLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/order-processing-service-test-sendNotification"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "order-processing-service",
                  "test",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup",
                    "logs:TagResource"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/order-processing-service-test*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/order-processing-service-test*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:PutItem",
                    "dynamodb:UpdateItem",
                    "dynamodb:GetItem",
                    "dynamodb:Scan"
                  ],
                  "Resource": "arn:aws:dynamodb:us-east-1:718361999916:table/OrderTable"
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "states:StartExecution"
                  ],
                  "Resource": {
                    "Fn::Sub": "arn:aws:states:us-east-1:718361999916:stateMachine:OrderProcessingStateMachine-test-v2"
                  }
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "order-processing-service",
              "test",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "TriggerOrderProcessingLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-3de87e23-2d08",
          "S3Key": "serverless/order-processing-service/test/1743637022309-2025-04-02T23:37:02.309Z/order-processing-service.zip"
        },
        "Handler": "handler.triggerOrderProcessing",
        "Runtime": "python3.8",
        "FunctionName": "order-processing-service-test-triggerOrderProcessing",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "TriggerOrderProcessingLogGroup"
      ]
    },
    "CreateOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-3de87e23-2d08",
          "S3Key": "serverless/order-processing-service/test/1743637022309-2025-04-02T23:37:02.309Z/order-processing-service.zip"
        },
        "Handler": "handler.createOrder",
        "Runtime": "python3.8",
        "FunctionName": "order-processing-service-test-createOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateOrderLogGroup"
      ]
    },
    "ProcessPaymentLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-3de87e23-2d08",
          "S3Key": "serverless/order-processing-service/test/1743637022309-2025-04-02T23:37:02.309Z/order-processing-service.zip"
        },
        "Handler": "handler.processPayment",
        "Runtime": "python3.8",
        "FunctionName": "order-processing-service-test-processPayment",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ProcessPaymentLogGroup"
      ]
    },
    "ShipOrderLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-3de87e23-2d08",
          "S3Key": "serverless/order-processing-service/test/1743637022309-2025-04-02T23:37:02.309Z/order-processing-service.zip"
        },
        "Handler": "handler.shipOrder",
        "Runtime": "python3.8",
        "FunctionName": "order-processing-service-test-shipOrder",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "ShipOrderLogGroup"
      ]
    },
    "SendNotificationLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "serverless-framework-deployments-us-east-1-3de87e23-2d08",
          "S3Key": "serverless/order-processing-service/test/1743637022309-2025-04-02T23:37:02.309Z/order-processing-service.zip"
        },
        "Handler": "handler.sendNotification",
        "Runtime": "python3.8",
        "FunctionName": "order-processing-service-test-sendNotification",
        "MemorySize": 1024,
        "Timeout": 6,
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "SendNotificationLogGroup"
      ]
    },
    "TriggerOrderProcessingLambdaVersionCA2wGKJPr4ZfMbsz6UTw520jxVfkJYmQIJRXbxKEeGw": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "TriggerOrderProcessingLambdaFunction"
        },
        "CodeSha256": "kikOJUApOjOIn7Ptn1S5hwMq/JAcZ7Z5clT6twrQBIU="
      }
    },
    "CreateOrderLambdaVersiondiIHlZ4czz3qHr53mfpycV56JD7uPHvPbfxLhCNtYs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateOrderLambdaFunction"
        },
        "CodeSha256": "kikOJUApOjOIn7Ptn1S5hwMq/JAcZ7Z5clT6twrQBIU="
      }
    },
    "ProcessPaymentLambdaVersionbjTPOyBUVAS6twvzrzMbPvlPusl1GS0MC0IWdthCB1k": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ProcessPaymentLambdaFunction"
        },
        "CodeSha256": "kikOJUApOjOIn7Ptn1S5hwMq/JAcZ7Z5clT6twrQBIU="
      }
    },
    "ShipOrderLambdaVersionVutFJEORSraqv8PG1G6SZGTOiG5lQJ79RcIgFVKNvs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "ShipOrderLambdaFunction"
        },
        "CodeSha256": "kikOJUApOjOIn7Ptn1S5hwMq/JAcZ7Z5clT6twrQBIU="
      }
    },
    "SendNotificationLambdaVersionki5cmeBUYnHNZkg4kBD01WT6zXSqN7vOYBOQM5s8": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "SendNotificationLambdaFunction"
        },
        "CodeSha256": "kikOJUApOjOIn7Ptn1S5hwMq/JAcZ7Z5clT6twrQBIU="
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "test-order-processing-service",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceProcessDashorder": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "process-order",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodProcessDashorderOptions": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "AuthorizationType": "NONE",
        "HttpMethod": "OPTIONS",
        "MethodResponses": [
          {
            "StatusCode": "200",
            "ResponseParameters": {
              "method.response.header.Access-Control-Allow-Origin": true,
              "method.response.header.Access-Control-Allow-Headers": true,
              "method.response.header.Access-Control-Allow-Methods": true
            },
            "ResponseModels": {}
          }
        ],
        "RequestParameters": {},
        "Integration": {
          "Type": "MOCK",
          "RequestTemplates": {
            "application/json": "{statusCode:200}"
          },
          "ContentHandling": "CONVERT_TO_TEXT",
          "IntegrationResponses": [
            {
              "StatusCode": "200",
              "ResponseParameters": {
                "method.response.header.Access-Control-Allow-Origin": "'*'",
                "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
              },
              "ResponseTemplates": {
                "application/json": ""
              }
            }
          ]
        },
        "ResourceId": {
          "Ref": "ApiGatewayResourceProcessDashorder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodProcessDashorderPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceProcessDashorder"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "TriggerOrderProcessingLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "TriggerOrderProcessingLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1743637015503": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "test"
      },
      "DependsOn": [
        "ApiGatewayMethodProcessDashorderOptions",
        "ApiGatewayMethodProcessDashorderPost"
      ]
    },
    "TriggerOrderProcessingLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "TriggerOrderProcessingLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "OrderTable": {
      "Type": "AWS::DynamoDB::Table",
      "Properties": {
        "TableName": "OrderTable",
        "AttributeDefinitions": [
          {
            "AttributeName": "orderId",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "orderId",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 5,
          "WriteCapacityUnits": 5
        }
      }
    },
    "StateMachine": {
      "Type": "AWS::StepFunctions::StateMachine",
      "Properties": {
        "StateMachineName": "OrderProcessingStateMachine-test-v2",
        "RoleArn": "arn:aws:iam::718361999916:role/MyStepFunctionsRole",
        "DefinitionString": {
          "Fn::Sub": "{\n  \"Comment\": \"Order Processing Workflow\",\n  \"StartAt\": \"CreateOrder\",\n  \"States\": {\n    \"CreateOrder\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${CreateOrderLambdaFunction.Arn}\",\n      \"Next\": \"ProcessPayment\",\n      \"InputPath\": \"$\",\n      \"ResultPath\": \"$.input\"\n    },\n    \"ProcessPayment\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ProcessPaymentLambdaFunction.Arn}\",\n      \"Next\": \"ShipOrder\",\n      \"InputPath\": \"$\",\n      \"ResultPath\": \"$.input\"\n    },\n    \"ShipOrder\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${ShipOrderLambdaFunction.Arn}\",\n      \"Next\": \"SendNotification\",\n      \"InputPath\": \"$\",\n      \"ResultPath\": \"$.input\"\n    },\n    \"SendNotification\": {\n      \"Type\": \"Task\",\n      \"Resource\": \"${SendNotificationLambdaFunction.Arn}\",\n      \"End\": true,\n      \"InputPath\": \"$\",\n      \"ResultPath\": \"$.input\"\n    }\n  }\n}\n"
        }
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": "serverless-framework-deployments-us-east-1-3de87e23-2d08",
      "Export": {
        "Name": "sls-order-processing-service-test-ServerlessDeploymentBucketName"
      }
    },
    "TriggerOrderProcessingLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "TriggerOrderProcessingLambdaVersionCA2wGKJPr4ZfMbsz6UTw520jxVfkJYmQIJRXbxKEeGw"
      },
      "Export": {
        "Name": "sls-order-processing-service-test-TriggerOrderProcessingLambdaFunctionQualifiedArn"
      }
    },
    "CreateOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateOrderLambdaVersiondiIHlZ4czz3qHr53mfpycV56JD7uPHvPbfxLhCNtYs"
      },
      "Export": {
        "Name": "sls-order-processing-service-test-CreateOrderLambdaFunctionQualifiedArn"
      }
    },
    "ProcessPaymentLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ProcessPaymentLambdaVersionbjTPOyBUVAS6twvzrzMbPvlPusl1GS0MC0IWdthCB1k"
      },
      "Export": {
        "Name": "sls-order-processing-service-test-ProcessPaymentLambdaFunctionQualifiedArn"
      }
    },
    "ShipOrderLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "ShipOrderLambdaVersionVutFJEORSraqv8PG1G6SZGTOiG5lQJ79RcIgFVKNvs"
      },
      "Export": {
        "Name": "sls-order-processing-service-test-ShipOrderLambdaFunctionQualifiedArn"
      }
    },
    "SendNotificationLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "SendNotificationLambdaVersionki5cmeBUYnHNZkg4kBD01WT6zXSqN7vOYBOQM5s8"
      },
      "Export": {
        "Name": "sls-order-processing-service-test-SendNotificationLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/test"
          ]
        ]
      },
      "Export": {
        "Name": "sls-order-processing-service-test-ServiceEndpoint"
      }
    },
    "CreateOrderLambdaArn": {
      "Value": {
        "Fn::GetAtt": [
          "CreateOrderLambdaFunction",
          "Arn"
        ]
      },
      "Export": {
        "Name": "CreateOrderLambdaArn"
      }
    },
    "ProcessPaymentLambdaArn": {
      "Value": {
        "Fn::GetAtt": [
          "ProcessPaymentLambdaFunction",
          "Arn"
        ]
      },
      "Export": {
        "Name": "ProcessPaymentLambdaArn"
      }
    },
    "ShipOrderLambdaArn": {
      "Value": {
        "Fn::GetAtt": [
          "ShipOrderLambdaFunction",
          "Arn"
        ]
      },
      "Export": {
        "Name": "ShipOrderLambdaArn"
      }
    },
    "SendNotificationLambdaArn": {
      "Value": {
        "Fn::GetAtt": [
          "SendNotificationLambdaFunction",
          "Arn"
        ]
      },
      "Export": {
        "Name": "SendNotificationLambdaArn"
      }
    }
  }
}